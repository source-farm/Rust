fn main() {
    // Rust обладает очень мощным инструментом для контроля выполнения кода - выражением match. С
    // помощью него можно выполнить некоторое действие в зависимости от с каким из вариантов
    // совпадёт наше значением, причем вариантом может быть литерал, переменная, wildcard и др.
    // Мощь match заключается в том, что компилятор проверяет все ли возможные варианты были
    // рассмотерны и если нет, генерирует ошибку.
    // Рассмотрим пример работы с match:

    #[derive(Debug)]
    enum UsState {
        Alabama,
        Alaska,
    }

    enum Coin {
        Penny,
        Nickel,
        Dime,
        Quarter(UsState), // Вариант Quarter должен иметь ассоциированное значение.
    }

    fn value_in_cents(coin: Coin) -> u32 {
        // После ключевого слова match можно указать значение любого типа.
        match coin {
            // Внутри фигурных скобок находятся так называемые ветви match'a(match arms). Каждая
            // ветвь состоит из шаблона(pattern), далее оператор => и за ним код, который будет
            // выполнен, если совпадение произойдёт с этим шаблоном. Код каждого из ветвей является
            // выражением и результатом выполнения всего выражения match будет результат кода в
            // ветви, которая и была выбрана.
            // Если код в ветви небольшой, то для кода обычно не используют фигурные скобки. Но для
            // выполнения нескольких строк кода их нужно использовать объязательно:
            Coin::Penny => {
                println!("Lucky penny!");
                1
            }
            Coin::Nickel => 5,
            Coin::Dime => 10,
            // Если у варианта перечисления есть ассоциированное значение, то его можно получить,
            // указав название переменной в скобках после шаблона:
            Coin::Quarter(state) => {
                println!("{:?}", state);
                25
            }
        }
    }

    println!("dime: {}", value_in_cents(Coin::Dime));
    value_in_cents(Coin::Penny);
    value_in_cents(Coin::Quarter(UsState::Alabama));
}
