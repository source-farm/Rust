fn main() {
    // Rust обладает очень мощным инструментом для контроля выполнения кода - выражением match. С
    // помощью него можно выполнить некоторое действие в зависимости от того с каким из вариантов
    // совпадёт наше значение, причем вариантом может быть литерал, переменная, wildcard и др.
    // Мощь match заключается в том, что компилятор проверяет все ли возможные варианты были
    // рассмотерны и если нет, генерирует ошибку.
    // Рассмотрим пример работы с match:

    #[derive(Debug)]
    enum UsState {
        Alabama,
        Alaska,
    }

    enum Coin {
        Penny,
        Nickel,
        Dime,
        Quarter(UsState), // Вариант Quarter имеет ассоциированное значение.
    }

    fn value_in_cents(coin: Coin) -> u32 {
        // После ключевого слова match можно указать значение любого типа.
        match coin {
            // Внутри фигурных скобок находятся так называемые ветви match'a(match arms). Каждая
            // ветвь состоит из шаблона(pattern), далее оператор => и за ним код, который будет
            // выполнен, если совпадение произойдёт с этим шаблоном. Код каждого из ветвей является
            // выражением и результатом выполнения всего выражения match будет результат кода в
            // ветви, которая и была выбрана.
            // Если код в ветви небольшой, то для кода обычно не используют фигурные скобки. Но для
            // выполнения нескольких строк кода их нужно использовать объязательно:
            Coin::Penny => {
                println!("Lucky penny!");
                1
            }
            Coin::Nickel => 5,
            Coin::Dime => 10,
            // Если у варианта перечисления есть ассоциированное значение, то его можно получить,
            // указав название переменной в скобках после шаблона:
            Coin::Quarter(state) => {
                println!("{:?}", state);
                25
            }
        }
    }

    println!("dime: {}", value_in_cents(Coin::Dime));
    value_in_cents(Coin::Penny);
    value_in_cents(Coin::Quarter(UsState::Alabama));

    //--------------------------------------------------------------------------------
    // Пример работы с перечислением Option<T>
    //--------------------------------------------------------------------------------
    fn plus_one(x: Option<i32>) -> Option<i32> {
        match x {
            None => None,
            Some(i) => Some(i + 1),
        }
    }
    let five = Some(5);
    let six = plus_one(five);
    let none = plus_one(None);
    println!("{:?}", six);
    println!("{:?}", none);

    //--------------------------------------------------------------------------------
    // Шаблон _
    //--------------------------------------------------------------------------------

    // Если мы не хотим рассматривать все возможные варианты значения, то можно воспользоваться
    // шаблоном '_':
    let some_u8_value = 0u8;
    match some_u8_value {
        1 => println!("one"),
        3 => println!("three"),
        // Все значения переменной some_u8_value, которые не были рассмотрены выше, попадут в эту
        // ветвь. () - это так называемое единичное значение(unit value). Оно буквально означает,
        // что не нужно ничего делать(что-то наподобие void из C).
        _ => (),
    }
}
