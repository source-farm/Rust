fn main() {
    // Для организации кода в Rust существуют пакеты и крейты(далее также будут рассмотрены модули,
    // а ещё дальше и рабочие пространства(workspaces)). Коротко взаимоотношение между пакетами и
    // крейтами можно описать так:
    //
    //     - крейт(crate) - это запускаемый файл(binary) или библиотека
    //     - корнем крейта(crate root) называют исходный файл, который используют для сборки крейта
    //     - пакет имеет файл Cargo.toml, который описывает как можно собрать один или несколько
    //       крейтов. Максимум один крейт в пакете может быть библиотекой.
    //
    // Команда cargo new приводит к созданию пакета. Если мы заглянем в файла Cargo.toml, то
    // увидим, что там не упоминается файл src/main.rs, но всё же каким-то образом cargo знает, что
    // мы хотим собрать именно запускаемый файл. Это происходит из-за того, что в Cargo принято
    // несколько соглашений:
    //
    //     - если в той же папке, что и файл Cargo.toml, который принадлежит пакету, находится
    //       папка src с файлом main.rs, то Cargo считает, что этот пакет содержит запускаемый крейт
    //       с таким же именем, что и название пакета и src/main.rs является корнем крейта.
    //
    //     - если в папке пакета находится файл src/lib.rs, то Cargo считает, что этот пакет содержит
    //       библиотечный крейт с таким же именем, что и название пакета и src/lib.rs является корнем
    //       этого крейта.
    //
    //     - корни крейтов передаются Cargo компилятору rustc для сборки запускаемого файла или
    //       библиотеки.
    //
    // Пакет может содержать максимум один библиотечный крейт и сколько угодно запускаемых крейтов.
    // Пакет должен содержать хотя бы один крейт.
}
