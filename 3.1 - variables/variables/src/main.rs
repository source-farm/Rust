fn main() {
    // Идентификаторы в Rust должны состоять из ASCII символов, могут начинаться с знака '_', за
    // которым объязательно должны идти буквы или цифры. Одиночный '_' не является валидным
    // идентификатором.
    // Также в Rust есть так называемые сырые идентификаторы(raw identifiers). Они используются,
    // когда не остаётся другого выхода, кроме как использовать зарезервированное слово в
    // качестве идентификатора. Начинаются сырые идентификаторы с r#:
    let r#fn = 0;
    println!("r#fn: {}", r#fn);

    // По-умолчанию переменные в Rust являются неизменяемыми(immutable).
    let x = 42;
    println!("x: {}", x);
    // Ошибка компиляции.
    // x = 0;

    // Изменяемые(mutable) переменные можно объявить так:
    let mut y = 42;
    println!("y: {}", y);
    y = 0;
    println!("y: {}", y);

    // Неизменяемые переменные напоминают по своей структуре понятие константы, но в Rust
    // это два понятия имеют существенные различия. Как и в других языках программирования в Rust
    // есть константы. Объявляются они с помощью ключевого слова const:
    const CM_IN_METER: i32 = 100;
    println!("1 meter = {} cm", CM_IN_METER);

    // Констант от неизменяемых переменных отличает следующее:
    //
    //   - при объявлении констант всегда необходимо явно указывать тип
    //   - константы можно объявлять в глобальной области видимости
    //   - константа может быть инициализирована только константным выражением, т.е. выражением,
    //     которое может быть вычислено на этапе компиляции.

    // В Rust также есть понятие перекрывания(shadowing) переменной. Уже объявленную переменную
    // можно объявить ещё раз, возможно используя другой тип:
    let z = 1;
    let z = z + 20;
    let z = z * 2;
    println!("z: {}", z); // 42

    // Перекрывание часто используют, если нужно привести переменную к другому типу, но не хочется
    // создавать ради этого новую переменную.
    // Сначала spaces является строкой.
    let spaces = "    ";
    // Затем становится числом.
    let spaces = spaces.len();
    println!("spaces: {}", spaces);
}
